:PROPERTIES:
:ID:       2ea4e782-48bf-412b-80dd-85c85f423700
:END:
#+title: Assembly

* First program
Program which will just exit:
#+begin_src asm :tangle ~/projects/assembly/exit.s :mkdirp yes
  .section .data  # section for data
  .section .text  # section for instructions
  .globl _start   # start of program
_start:           # defines the value of _start
  movl $1, %eax   # 1 for exit system call
  movl $0, %ebx   # 0 as status code for exit system call
  int $0x80       # interrupt and call linux kernel
#+end_src

Above is a human readable *Source code*, now we need to *assemble* it and *link* it.
** Assemble
convert source code to machine readable code. exit.o is an object file.
#+begin_src sh
$as exit.s -o exit.o
#+end_src
** Linking
In case of many source files a linker put together all object files and organize it.
Currently we have only one object file.
#+begin_src sh
$ld exit.o -o exit
#+end_src
** Run
#+begin_src sh
$./exit
#+end_src
** Check
#+begin_src sh
$echo $?
#+end_src
Whenever linux finishes a exit program it returns a /exit status code/. If the exit is fine without any error it will give 0.

* Outline of an Assembly program
- # = comments
** Assembler directives
Also known as *pseudo-operations*. 
Will not translated to machine code but rather directions for the *assembler*.
*** .section
breaks a program into sections
**** .section .data
List any memory storage needed for data.
**** .section .text
section for program instructions.
*** Symbol
_start is a symbol that can be replaced with something else during assembling or linking.
Mark locations of the program or data by name instead of remembering the exact address. Assembler & linker keep track of addresses using symbols.

_globl means the assembler will not discard the symbol after assembly as linker needs it.

Now /.global _start/ is special as in it marks the *start of the program*.
*** Label
A label is a symbol followed by :. It defines the value of the symbol. Label indicates that whatever follows (data or instruction) to be the value of the symbol. So it acts as an identifier that acts as a place maker for instructions and data. eg /_start:/
*** Instruction
movl $1, %eax
**** Operands
An instruction may have operands. Here movl source destination. %eax is a register and $1 is
a literal number 1. Registers can be general purpose and special purpose. %eax is general purpose.
**** $
$1 means immediate addressing mode. if it was just 1 then movl will move the data at the address 1 instead of moving the number 1 itself. ie without $ it would be direct addressing mode.
*** System call
Request for OS.
For a system call we need to put some specific value to %eax. Here for /exit system call/
1 should be in %eax.
**** Parameters
Extra data required for the system call to be made. In the eg its the /status code/ to be loaded in %ebx.
*** Interrupt (int)
int $0x80 stops the program flow and handover control to /interrupt handler/ (here its handled by linux kernel) for the system call.
