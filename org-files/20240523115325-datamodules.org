:PROPERTIES:
:ID:       e8fe385c-c536-4c5a-9bfc-75197b3ed217
:END:
#+title: Datamodules

* Mediscan
#+begin_src python :tangle ~/projects/ultrasound/datamodules/mediscan.py :mkdirp yes
import os
import random
import pickle
import cv2
import numpy as np
import lightning as L
from torch.utils.data import DataLoader, Dataset
from torchvision import transforms as T
import torch.nn.functional as F
import torch

class MediscanDataset(Dataset):
  def __init__(self, img_paths, transform=None):
    self.img_paths = img_paths
    self.transform = transform
    pixel_mean = [123.675, 116.28, 103.53]
    pixel_std = [58.395, 57.12, 57.375]
    self.pixel_mean =  torch.Tensor(pixel_mean).view(-1, 1, 1)
    self.pixel_std = torch.Tensor(pixel_std).view(-1, 1, 1)

  def __len__(self):
    return len(self.img_paths)


  def sam_preprocess(self,x):
    # Normalize colors
    x = (x - self.pixel_mean) / self.pixel_std

    # Pad
    h, w = x.shape[-2:]
    padh = 1024 - h
    padw = 1024 - w
    x = F.pad(x, (0, padw, 0, padh))
    return x

  def __getitem__(self,idx):
    img_path = self.img_paths[idx]
    mask_path = img_path.replace("images", "masks")
    
    id_ = img_path.split("/")[-3]+"_"+img_path.split("/")[-1][:-4]

    img = cv2.imread(img_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    orig_shape = img.shape
    mask = cv2.imread(mask_path,0)
    mask[mask > 0] = 1

    if self.transform:
        img = self.transform(img)
        mask = self.transform(mask)

    
    img = torch.from_numpy(np.array(img)).permute(2, 0, 1).float()
    mask = torch.from_numpy(np.array(mask)).float()

    img = F.interpolate(img.unsqueeze(0), 1024, mode="bilinear", align_corners=False, antialias=True).squeeze(0)
    mask = mask.unsqueeze(0).unsqueeze(0)
    mask = F.interpolate(mask, 1024, mode="bilinear", align_corners=False, antialias=True).squeeze(0).squeeze(0)

    mask[mask>0.5]=1
    mask[mask<=0.5]=0

    img = self.sam_preprocess(img)

    out = {"img": img, "mask":mask, "orig_shape": orig_shape}
    out["id"] = img_path.split("/")[-3]+"_"+img_path.split("/")[-1][:-4]
    return out


class Mediscan(L.LightningDataModule):
    def __init__(self, data_dir, resize_dim, batch_size):
        super().__init__()
        self.data_dir = data_dir

        self.transform = T.Compose([
          T.ToPILImage(),
          T.Resize((resize_dim, resize_dim)),
          T.ColorJitter(brightness=0.4,
                        contrast=0.4,
                        saturation=0.4,
                        hue=0.1),
          T.RandomHorizontalFlip(),
          T.RandomAffine(22, scale=(0.75, 1.25)),
          # T.ToTensor()
        ])

        self.target_transform = T.Compose([
          T.ToPILImage(),
          T.Resize((resize_dim, resize_dim)),
          # T.ToTensor()
        ])

        self.batch_size=batch_size

    def prepare_data(self):
        imgs = {}
        img_dir = self.data_dir
        # for label in os.listdir(img_dir):
        #     imgs[label] = [os.path.join(img_dir, label, "images", x) for x in os.listdir(os.path.join(img_dir, label, "images"))]

        # train = []
        # test = []

        # for label in imgs:
        #     train_split = imgs[label][:int(0.9*(len(imgs[label])))]
        #     train += train_split
        #     tmp = imgs[label][int(0.9*(len(imgs[label]))):]
        #     test += tmp

        # random.shuffle(train)
        # with open('train.pkl', 'wb') as f:
        #     pickle.dump(train, f)
        # with open('test.pkl', 'wb') as f:
        #     pickle.dump(test, f)

        file = open('train.pkl', 'rb')
        train = pickle.load(file)
        file.close()
        file = open('test.pkl', 'rb')
        test = pickle.load(file)
        file.close()

        self.train = train#[:100]
        self.test = test#[:100]
        print(f'Train: {len(train)}; Test: {len(test)}')

    def setup(self, stage: str):
        if stage == "fit":
            self.train_ds = MediscanDataset(self.train, self.transform)
            self.val_ds = MediscanDataset(self.test, self.target_transform)
        if stage == "test":
            self.test_ds = MediscanDataset(self.test, self.target_transform)
        if stage == "predict":
            self.test_ds = MediscanDataset(self.test, self.target_transform)


    def train_dataloader(self):
        return DataLoader(self.train_ds, batch_size=self.batch_size, shuffle=True, drop_last=True, num_workers=0)

    def val_dataloader(self):
        return DataLoader(self.val_ds, batch_size=1, shuffle=False, drop_last=False, num_workers=0)

    def test_dataloader(self):
        return DataLoader(self.test_ds, batch_size=self.batch_size)

    def predict_dataloader(self):
        return DataLoader(self.predict_ds, batch_size=self.batch_size)
#+end_src
