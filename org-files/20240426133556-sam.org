:PROPERTIES:
:ID:       c2ef2104-39a5-4e0b-a07a-425de90b641f
:END:
#+title: SAM

* Paper
- https://arxiv.org/pdf/2304.02643.pdf
* Basics
[[id:6a264343-c962-4719-a3ce-bdf68ae8ff41][Large language models]] pre-trained on large datasets (web-scale) are known as [[id:021a9dcf-0ed8-429b-b04e-fc2867f2d384][Foundation models]]. These models show very good performance on unseen dataset ie [[id:6d9aa203-daeb-4e41-9aae-41f30adf45ef][Zero-shot learning]] and [[id:7f9d9efa-0b6a-4020-a183-6e9432d7737c][Few-shot learning]]. Further they can also be used for various tasks or even out-of-distribution dataset. This is enabled by [[id:1320fe6c-2d8d-49a6-a012-7c826c07f83a][Prompt engineering]], using text to prompt the model to give a valid response depending on the task.

CLIP and ALIGN are examples of foundation model that tries to align text and image modalities together. Goal of SAM is /to create a foundation model for image segmentation/.

Following components are crucial in creating a foundation model:
1. Which task provides better zero shot generalization?
2. What would be the corresponding model architecture?
3. What data is required?

Ans 1: Promptable segmentation task
Ans 2: Model with a flexible prompt encoder and mask generator
Ans 3: A data engine using model itself to help the annotations

* Segment Anything Task
In NLP task for pretraining foundation model is /next token prediction/. In segmentation a prompt would be set of points, bounding box, masks, free form text etc. A valid output would be a valid mask even if we give vague prompts for multiple objects, there should be a minimum one reasonable mask. 

[[./img/samtask.png]]

Aim of SAM is to be adaptable for other segmentation tasks, like:
1. Semantic segmentation
   pixelwise class label eg: cars-red, background-green
2. Instance segmentation
   object detection+segmentation. eg: car_1, car_2
3. Panoptic segmentation
   each pixel has two identifiers: class label and instance id. ie semantic+instance
4. Interactive segmentation
5. Edge detection
6. Foreground segmentation
7. Object proposal segmentation

SAM can act as a component in a larger system addressing different segmentation task.

* Segment Anything Model

Constraints:
1. Support Flexible prompts
2. Generate masks in amortized real-time
3. Ambiguity aware

   A 3 component design
[[./img/sammodel.png]]

Ans 1: A prompt encoder enables handling multiple type of prompts
Ans 2: We can use a single image embedding with multiple prompts giving us a 50 ms inference time for prompt encoder+mask decoder.
Ans 3: A single prompt and embedding will generate multiple mask to handle the ambiguity.

[[./img/sammodel2.png]]

** Image Encoder
It can be any network that output $C \times H \times W$. SAM uses an MAE pretrained Vision transformer.

TODO:
Attention
Transformer
Vision transformer
MAE ViT

* Installation
#+begin_src sh
$pip install git+https://github.com/facebookresearch/segment-anything.git
$pip install opencv-python pycocotools matplotlib onnxruntime onnx
#+end_src
* Download weights
- Download model checkpoints from [[https://github.com/facebookresearch/segment-anything?tab=readme-ov-file#model-checkpoints][here]].
  - h=Huge
  - l=Largw
  - B=base
* Usage
** Necessary imports 
#+begin_src python :tangle ~/projects/ultrasound/segmentation/sam/sam.py :mkdirp yes
import os
import pickle
import time
import cv2
import torch
import matplotlib.pyplot as plt
from segment_anything import SamAutomaticMaskGenerator, sam_model_registry
import numpy as np

#+end_src
** Fix opencv-pyqt5 error
#+begin_src python :tangle ~/projects/ultrasound/segmentation/sam/sam.py :mkdirp yes
os.environ.pop("QT_QPA_PLATFORM_PLUGIN_PATH")

#+end_src
** Create overlay function
#+begin_src python :tangle ~/projects/ultrasound/segmentation/sam/sam.py :mkdirp yes
if not torch.cuda.is_available():
    raise Exception("CUDA not available!")
else:
    print("CUDA available")
    device = torch.device('cuda')

def show_anns(anns):
    if len(anns) == 0:
        return
    # sort as per area
    sorted_anns = sorted(anns, key=(lambda x: x['area']), reverse=True)
    ax = plt.gca()
    ax.set_autoscale_on(False)
    # create zero matrix with alpha channel=1
    img = np.ones((sorted_anns[0]['segmentation'].shape[0], sorted_anns[0]['segmentation'].shape[1], 4))
    img[:,:,3] = 0
    for ann in sorted_anns:
        m = ann['segmentation'] # get individual binary mask
        # create random color with alpha=0.35
        color_mask = np.concatenate([np.random.random(3), [0.35]])
        # replace True with color
        img[m] = color_mask
    ax.imshow(img)
    return img

#+end_src
** Setup SAM model
#+begin_src python :tangle ~/projects/ultrasound/segmentation/sam/sam.py :mkdirp yes
# sam model setup
sam = sam_model_registry["vit_l"](checkpoint="ckpts/sam_vit_l_0b3195.pth")
sam = sam.to(device=device)
mask_generator = SamAutomaticMaskGenerator(sam)

root = "/home/lfz/projects/ultrasound/datasets/mediscan-seg"
os.makedirs("./results", exist_ok=True)

#+end_src
** Generate and save SAM results
#+begin_src python :tangle ~/projects/ultrasound/segmentation/sam/sam.py :mkdirp yes
data = {}
for label in os.listdir(root):
    sub_root = os.path.join(root,label,"images")
    label_data = {}
    x_dicts = []
    label_data["num"] = len(os.listdir(sub_root))
    imgs = os.listdir(sub_root)
    for x in imgs: #os.listdir(sub_root):
        x_dict = {}
        x_dict["name"] = x
        img_path = os.path.join(sub_root,x)
        # read input image
        img = cv2.imread(img_path)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        # plt.figure()
        plt.figure(figsize=(20,20))
        plt.imshow(img)
        plt.axis('off')
        # mask generation using sam
        start_ts = time.time()
        masks = mask_generator.generate(img)
        end_ts = time.time()
        t = (end_ts-start_ts)
        true_mask = cv2.imread(img_path.replace("images","masks"))
        true_mask = cv2.cvtColor(true_mask, cv2.COLOR_BGR2GRAY)
        true_mask[true_mask>=200]=255.0
        true_mask[true_mask<200]=0.0
        true_mask = true_mask.astype(bool)
        iou = []
        for ann in masks:
            m = ann['segmentation']
            intersection = np.logical_and(m, true_mask)
            union = np.logical_or(m, true_mask)
            iou_score = np.sum(intersection) / np.sum(union)
            iou.append(iou_score)
        iou = np.array(iou)
        iou_best = np.max(iou)
        idx = np.argmax(iou)
        best_mask = masks[idx]['segmentation']
        
        masks_overlay = show_anns(masks)
        plt.savefig(os.path.join("results", x), bbox_inches='tight')
        plt.close()
        print(f'{label}/{x} : iou = {iou_best:.3f} time = {t:.3f}')
        x_dict["infer_time"] = t
        x_dict["iou"] = iou_best
        x_dict["mask"] = best_mask
        x_dicts.append(x_dict)
    label_data["data"] = x_dicts
    data[label] = label_data

with open('sam_data.pkl', 'wb') as handle:
    pickle.dump(data, handle, protocol=pickle.HIGHEST_PROTOCOL)
#+end_src

* [[id:fc2fbd95-72de-4a25-9cb6-f491b48c29e1][Fine-tune SAM]] 
* [[id:b9cdac99-0341-47a9-bf7a-59c1b6c87234][AutoSAM]] 
