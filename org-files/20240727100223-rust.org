:PROPERTIES:
:ID:       f98f2af0-e360-4b1f-b411-ae8d6103ade7
:END:
#+title: Rust

* Installation
** Rustup
- CLI tool for managing Rust.
#+begin_src shell
$ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh
$ rustc --version
$ rustup update
$ rustup self uninstall
#+end_src

** Linker
A program that Rust uses to join its compiled outputs into one file. A C compiler will have a linker. eg: GCC, Clang.

** Local documentaion
Run rustup doc
* Compile and run using rustc
#+begin_src shell
$ rustc hello.rs
$ ./hello
#+end_src
Useful  for simple script, for bigger projects use cargo.
* Cargo
Rust's build system and package manager.
#+begin_src shell
$ cargo --version
# new project
$ cargo new hello_world
$ cargo build
$ cargo run #compile and run
$ cargo check
#+end_src

* Hello world
- println! is a rust macro because of !. Functions do not have !.
#+begin_src rust
fn main() {
    println!("Hello, world!");
}
#+end_src

* User input 
#+begin_src rust :tangle ~/main.rs
fn main(){
    let mut guess = String::new();
    std::io::stdin()
        .read_line(&mut guess)
        .expect("Failed to read line");

    println!("You guessed: {}", guess);
}
#+end_src

* Variables and Mutability
** Variable
- By default variable is immutable.
- We have to define mut specifically for immutable variable.
** Constants
- constants cannot be converted to immutable like variables can. Type should be given
#+begin_src rust
fn main() {
    let x = 5;
    println!("The value of x is: {x}");
    // x = 6; this will give an error
    let mut x2 = 5;
    x2 = 6; //no error
    println!("The value of x is: {x2}");
    //constant
   const CONSTANT_1 :u32 = 1234;
}
#+end_src

** Shadowing
Creating a new variable with the same name.
Because we are creating new variable it can be a new type on shadowing.
#+begin_src rust
fn main(){
   let x = 5;
   // x = 6; error
   let x = x + 1; // shadowing
   println!("{x}");
}
#+end_src

* Data Types
- Statically typed
** Static type
Single value
*** Integer
signed = $-2^{n-1} -> 2^{n-1}-1$
unsigned = $0 -> 2^n-1$
*** Float
f32-single precision
f64-double precision
*** Boolean
*** Char
4 byte length. More than ascii
** Compound type
*** Tuple
#+begin_src rust
fn main() {
    let tup: (i32, f64, u8) = (500, 6.4, 1);
    let x = tup.0;
    println!("{x}");
    // destructure
    let (x,y,z) = tup;
    println!("{x}, {y}, {z}");
}
#+end_src

**** Unit
A tuple without any value. Value and type both are ().
Expressions without any return value returns this ().

*** Array
All elements should be same type.
#+begin_src rust
fn main() {
    let a = [1, 2, 3, 4, 5];
    let a1: [i32; 5] = [1, 2, 3, 4, 5];
}
#+end_src
Data allocated on stack instead of heap.

* Functions
#+begin_src rust
fn main() {
    println!("Hello, world!");

    another_function();
}

fn another_function() {
    println!("Another function.");
}
#+end_src
Functions can be defined before or after main().

** Parameters
Variables part of function signature.
In function signatures, you must declare the type of each parameter.
** Arguments
Concrete values given for parameters.
#+begin_src rust
fn main() {
    another_function(5);
}

fn another_function(x: i32) {
    println!("The value of x is: {x}");
}
#+end_src
** Statements
 Instructions that perform some action and do not return a value.
** Expressions
Evaluate to a resultant value.
#+RESULTS:
: The value of x is: 5
* Control Flow
** if
#+begin_src rust
fn main() {
    let number = 6;

    if number % 4 == 0 {
        println!("number is divisible by 4");
    } else if number % 3 == 0 {
        println!("number is divisible by 3");
    } else if number % 2 == 0 {
        println!("number is divisible by 2");
    } else {
        println!("number is not divisible by 4, 3, or 2");
    }
    let condition = true;
    let number = if condition { 5 } else { 6 };

    println!("The value of number is: {number}");
}
#+end_src

** loop
execute a block of code over and over again forever or until you explicitly tell it to stop.
#+begin_src rust
fn main() {
    let mut counter = 0;

    let result = loop {
        counter += 1;

        if counter == 10 {
            break counter * 2;
        }
    };

    println!("The result is {result}");
}
#+end_src
*** Loop label
we can specify a loop to break on continue when using nested loops.
#+begin_src rust
fn main() {
    let mut count = 0;
    'counting_up: loop {
        println!("count = {count}");
        let mut remaining = 10;

        loop {
            println!("remaining = {remaining}");
            if remaining == 9 {
                break;
            }
            if count == 2 {
                break 'counting_up;
            }
            remaining -= 1;
        }

        count += 1;
    }
    println!("End count = {count}");
}
#+end_src
** while
#+begin_src rust
fn main() {
    let mut number = 3;

    while number != 0 {
        println!("{number}!");

        number -= 1;
    }
    println!("LIFTOFF!!!");
}
#+end_src
** for
loop through collections
#+begin_src rust
fn main() {
    let a = [10, 20, 30, 40, 50];

    for element in a {
        println!("the value is: {element}");
    }
    for number in (1..4).rev() {
        println!("{number}!");
    }
    println!("LIFTOFF!!!");
}
#+end_src

* Ownership
A set of rules that govern how a Rust program manages memory. 
1. Through garbage collection.
2. Programmer must explicity allocate and free memory.
3. Rust uses set of rules instead. If it get violated it does not get compiled.
** Stack and Heap
System language behave differently based on where a value is located, ie on stack or heap.
*** Stack
Store values in order, LIFO.
Data's size should be known during compile time.
*** Heap
Memory allocator find a free spot in memory and returns a pointer. Since the pointer's size is known, the pointer will be stored in stack.
** Ownership Rules
*** Each value in Rust has an owner.
*** There can only be one owner at a time.
*** When the owner goes out of scope, the value will be dropped.
#+RESULTS:
: Hello, world!
: Another function.
