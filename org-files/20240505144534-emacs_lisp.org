:PROPERTIES:
:ID:       62040c0e-a0ca-4f42-a6ef-a9eb992ae15c
:END:
#+title: Emacs-Lisp

* Quickstart
- Reference: http://xahlee.info/emacs/emacs/elisp.html
#+begin_src emacs-lisp
(+ 2 3)
#+end_src

* Comment
code ignored by emacs lisp.
#+begin_src emacs-lisp
;; this is a comment
(+ 2 5)
#+end_src
* Print
** To message buffer
#+begin_src emacs-lisp
(message "Name is: %s" "Joe")
#+end_src
** To current buffer
#+begin_src emacs-lisp
(insert "something")
#+end_src
** To a buffer
#+begin_src emacs-lisp
(setq buff1 (generate-new-buffer "*buff1 output*"))
;; print with a newline at end
(print "well hello there!" buff1)
;; a warning
(warn "Name is: %s" "Joe")
(switch-to-buffer buff1)
#+end_src
- print1 will not add a newline at end
** Temporarily Specify a Buffer for Output
- buffer would be cleared before printing it
#+begin_src emacs-lisp
(let ((xbuff (generate-new-buffer "*my output*")))
  (with-output-to-temp-buffer xbuff
    ;; this is printed to xbuff
    (print "abc")
    ))
#+end_src
* String
#+begin_src emacs-lisp
"This is a string \"slash is a escape character\".\n This is on new line.
\t We can also add unicode char like this \U0001f638"
#+end_src
** length of a string
#+begin_src emacs-lisp
(length "abc")
#+end_src
** Extract substring
#+begin_src emacs-lisp
(substring "abc123" 0 3)
#+end_src
** Concatenate two strings
#+begin_src emacs-lisp
(concat "some" "thing")
#+end_src
** Split a string by a seperator
#+begin_src emacs-lisp
(split-string "xy_007_cat" "_")
#+end_src
* Number 
#+begin_src emacs-lisp
;; int
123
123.

;; float
123.0

;; scientific
1e3

;; Binary
#b11
;; hexadecimal
#xff
#+end_src
* Arithematic
#+begin_src emacs-lisp
;; addition
(+ 4 5 1)
;; subtraction
(- 4 5 1)
;; multiplication
(* 4 5 1)
;; division
(/ 13 5.0 2)
;; modular arithmetic, remainder
(% 7 4) ; 3
;; Power; Exponential
(expt 2 3) ; 8
;; check type
(integerp 2)
#+end_src
- Usually a function ending with p returns true(t) or false(nil).
  p stands for *predicate*.
* Variables
** Global variables
#+begin_src emacs-lisp
;; setq returns last set value
(setq xa 1 xb 2 xc 3)
;; defvar Declare and assign a variable, and return the symbol
;; (defvar name &optional INITVALUE DOCSTRING)
(defvar xx 4 "DOCSTRING")
#+end_src
** Local variable
#+begin_src emacs-lisp
;; variable by default is nil
;; returns the value of the last expression in body
(let (a b)
 (setq a 3)
 (setq b 4)
 (+ a b)
) ;  7

;; variables can also have following form
(let ((a 3) (b 4))
 (+ a b)
) ;  7

#+end_src
* Conditionals 
** if else
- progn is a block of expressions which returns value of last expression.
#+begin_src emacs-lisp
(if something
    (progn ; true
      ;; code here
      )
  (progn ; else
    ;; code here
    ))
#+end_src
** when
- when if there is no need of else block
#+begin_src emacs-lisp

(when something
    (progn ; true
      ;; code here
      ))
#+end_src
** cond (similar to switch)
- if a branch condition is true it runs the corresponding branch and exit
#+begin_src emacs-lisp
(cond
(CONDITION1 BODY1)
(CONDITION2 BODY2)
etc
(t BODY)
)
#+end_src

* Loop
** While
#+begin_src emacs-lisp
(while (test)
body
)
#+end_src

** dotimes
loop fixed times
#+begin_src emacs-lisp
(dotimes (VAR COUNT) BODY)
(dotimes (VAR COUNT RESULT) BODY)
#+end_src

* Datastructure

** List
- linked list
- empty list == nil
*** Create list
#+begin_src emacs-lisp
; assign a list to a var
(setq xx (list 1 "b" 3))
(message "%S" xx)

(setq xx '(a b c))
#+end_src
*** Get elements
#+begin_src emacs-lisp
;; first element
(car '("a" "b" "c"))
;; everything except first
(cdr '(0 1 2 3 4))
;; nth element
(nth 1 '(0 1 2 3 4))
;; rest starting at nth
(nthcdr 2 '(0 1 2 3 4))
;; without last n elements
(butlast '(0 1 2 3 4 5) 3)
#+end_src

* Basic Terminology
** Buffer
Area containing editable text.
** Point
where cursor is.
** Window
Section of emacs seperated by splits.
** Frame
The current gui window of emacs.
** Minibuffer
Text area at the bottom area.
** Mark
Point where for eg a highlighted text starts. can be set
by set-mark command.
** Region
Area between a mark and point
** Major mode
Current programming language
** Minor mode
extra layer/modes like spell checking

At a time we can only have one major mode while we can have multiple
minor mode.

* Functions
#+begin_src emacs-lisp :tangle yes
(defun func1 (arg1 arg2)
  (+ arg1 arg2))

(func1 1 4)
#+end_src

#+RESULTS:
: 5

#+begin_src emacs-lisp
(funcall 'func1 1 6)
#+end_src

#+RESULTS:
: 7
